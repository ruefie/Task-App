// Variables
@use "sass:map";
@use "sass:color";

$colors: (
  primary: #3b82f6,
  primary-light: #dbeafe,
  primary-dark: #1d4ed8,
  secondary: #6b7280,
  warning: #f59e0b,
  warning-light: #fef3c7,
  warning-dark: #b45309,
  danger: #dc2626,
  danger-light: #fee2e2,
  danger-dark: #b91c1c,
  success: #10b981,
  gray-50: #f9fafb,
  gray-100: #f3f4f6,
  gray-200: #e5e7eb,
  gray-300: #d1d5db,
  gray-400: #9ca3af,
  gray-500: #6b7280,
  gray-600: #4b5563,
  gray-700: #374151,
  gray-800: #1f2937,
  gray-900: #111827,
  white: #ffffff
);

// Spacing
$spacing: (
  xs: 0.25rem,
  sm: 0.5rem,
  md: 0.75rem,
  base: 1rem,
  lg: 1.25rem,
  xl: 1.5rem,
  '2xl': 2rem
);

// Shadows
$shadows: (
  sm: 0 1px 2px rgba(0, 0, 0, 0.05),
  md: 0 1px 3px rgba(0, 0, 0, 0.1)
);

// Border radius
$radius: (
  sm: 0.25rem,
  md: 0.375rem,
  lg: 0.5rem,
  full: 9999px
);

// Mixins
@mixin flex($direction: row, $justify: flex-start, $align: stretch, $gap: 0) {
  display: flex;
  flex-direction: $direction;
  justify-content: $justify;
  align-items: $align;
  @if $gap != 0 {
    gap: $gap;
  }
}

@mixin grid($columns: 1, $gap: map.get($spacing, base)) {
  display: grid;
  grid-template-columns: $columns;
  gap: $gap;
}

// Styles
.container {
  // padding: map.get($spacing, sm);
}

.header {
  @include flex(row, space-between, center);
  margin-bottom: map.get($spacing, '2xl');
  
  h1 {
    margin: 0;
    font-size: 1.875rem;
    font-weight: 600;
    color: var(--text);
  }
}

.headerButtons {
  @include flex(row, flex-start, center, map.get($spacing, md));
}

%button-base {
  @include flex(row, center, center, map.get($spacing, sm));
  padding: map.get($spacing, sm) map.get($spacing, base);
  background-color: var(--card);
  border: 1px solid var(--border);
  color: var(--text);
 
  border-radius: map.get($radius, md);
  // color: map.get($colors, gray-600);
  font-size: 0.875rem;
  font-weight: 500;
  cursor: pointer;
  transition: all 0.2s ease-in-out;

  &:hover {
    background-color: var(--card-hover);
    box-shadow:
      0 0 0 1px var(--btn-hover-outline), /* subtle outline ring */
      0 6px 16px var(--elev);              /* soft elevation */
    color: var(--text);
    transform: scale(1);
  }

  &:active {
    transform: scale(0.99);
  }

  &:disabled {
    opacity: 0.6;
    cursor: not-allowed;
  }

  svg {
    width: 1rem;
    height: 1rem;

    &.spinning {
      animation: spin 1s linear infinite;
    }
  }
}

.analyticsToggle, .refreshButton {
  @extend %button-base;
}

@keyframes spin {
  from { transform: rotate(0deg); }
  to { transform: rotate(360deg); }
}

.error {
  padding: map.get($spacing, base);
  margin-bottom: map.get($spacing, base);
  background-color: map.get($colors, danger-light);
  border: 1px solid map.get($colors, danger);
  border-radius: map.get($radius, md);
  color: map.get($colors, danger-dark);
}

.dashboard {
  @include flex(column, flex-start, stretch, map.get($spacing, xl));
}

.overviewGrid {
  @include grid(repeat(auto-fit, minmax(350px, 1fr)), map.get($spacing, base));
}

.card {
  background-color: var(--card-hover);
  border-radius: map.get($radius, lg);
  padding: map.get($spacing, lg);
  box-shadow:
  0 0 0 1px var(--btn-hover-outline), /* subtle outline ring */
  0 6px 16px var(--elev); 
}

.cardHeader {
  @include flex(row, flex-start, center, map.get($spacing, md));
  margin-bottom: map.get($spacing, base);

  h3 {
    margin: 0;
    font-size: 1rem;
    font-weight: 600;
    color: var(--text);
  }

  svg {
    color: map.get($colors, gray-500);
  }
}

.cardContent {
  @include flex(column, flex-start, stretch, map.get($spacing, md));
}

.stat {
  @include flex(row, space-between, center);
  font-size: 0.875rem;
  color: var(--text);

  .value {
    font-weight: 600;
    color: var(--text);
  }
}

// Priority colors
.urgent {
  color: map.get($colors, danger);
}

.high {
  color: map.get($colors, warning);
}

.normal {
  color: map.get($colors, primary);
}

// Employee Section
.employeeSection {
  margin-top: map.get($spacing, base);
}

.employeeList {
  @include grid(repeat(auto-fill, minmax(300px, 1fr)), map.get($spacing, base));
}

.employeeItem {
  background-color: map.get($colors, white);
  border-radius: map.get($radius, lg);
  padding: map.get($spacing, base);
  box-shadow: map.get($shadows, sm);
  transition: transform 0.2s ease;

  &:hover {
    transform: translateY(-2px);
  }
}

.employeeHeader {
  @include flex(row, space-between, center);
  margin-bottom: map.get($spacing, base);
}

.employeeName {
  font-size: 1rem;
  font-weight: 600;
  color: map.get($colors, gray-900);
}

.totalTasks {
  @include flex(row, center, center);
  padding: map.get($spacing, xs) map.get($spacing, md);
  background-color: var(--card-hover);
  border-radius: map.get($radius, full);
  font-size: 0.875rem;

  .count {
    font-weight: 600;
    color: var(--text);
    margin-left: map.get($spacing, sm);
  }
}

.statsGrid {
  @include grid(repeat(4, 1fr), map.get($spacing, sm));
  margin-bottom: map.get($spacing, md);
}

.statBox {
  padding: map.get($spacing, sm);
  background-color: map.get($colors, gray-50);
  border-radius: map.get($radius, md);
  text-align: center;

  .label {
    font-size: 0.75rem;
    color: map.get($colors, gray-500);
    margin-bottom: map.get($spacing, xs);
    display: block;
  }

  .value {
    font-size: 1rem;
    font-weight: 600;
    color: map.get($colors, gray-900);
  }
}

.priorityBadges {
  @include flex(row, flex-start, center, map.get($spacing, sm));
}

.badge {
  padding: map.get($spacing, xs) map.get($spacing, sm);
  border-radius: map.get($radius, md);
  font-size: 0.75rem;
  font-weight: 500;
  @include flex(row, center, center, map.get($spacing, xs));

  &.normal {
    background-color: map.get($colors, primary-light);
    color: map.get($colors, primary-dark);
  }

  &.high {
    background-color: map.get($colors, warning-light);
    color: map.get($colors, warning-dark);
  }

  &.urgent {
    background-color: map.get($colors, danger-light);
    color: map.get($colors, danger-dark);
  }
}

// Distribution Section
.distributionSection {
  @include grid(repeat(auto-fit, minmax(400px, 1fr)), map.get($spacing, xl));
}

.distributionList {
  @include flex(column, flex-start, stretch, map.get($spacing, md));
}

.distributionItem {
  @include grid(2fr 3fr 1fr, map.get($spacing, base));
  align-items: center;
  font-size: 0.875rem;
}

.label {
  color: map.get($colors, gray-600);
  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;
}

.bar {
  height: 0.5rem;
  background-color: map.get($colors, gray-200);
  border-radius: map.get($radius, sm);
  overflow: hidden;
}

.fill {
  height: 100%;
  background-color: map.get($colors, primary);
  border-radius: map.get($radius, sm);
  transition: width 0.3s ease;
}

.count {
  color: map.get($colors, gray-900);
  font-weight: 500;
  text-align: right;
}

// Activity Section
.activitySection {
  @include grid(repeat(auto-fit, minmax(400px, 1fr)), map.get($spacing, xl));
}

.activityList {
  @include flex(column, flex-start, stretch, map.get($spacing, md));
}

.activityItem {
  @include flex(row, space-between, center);
  padding: map.get($spacing, md);
  background-color: var(--card-hover);
  box-shadow:
      0 0 0 1px var(--btn-hover-outline), /* subtle outline ring */
      0 6px 16px var(--elev); 
  span{color:var(--text);}
  border-radius: map.get($radius, md);
  transition: background-color 0.2s ease;

  &:hover {
    /* Visible in both themes */
    background-color: var(--card-hover);
    box-shadow:
      0 0 0 1px var(--btn-hover-outline), /* subtle outline ring */
      0 6px 16px var(--elev);              /* soft elevation */
    color: var(--text);
    transform: scale(1);
  }

  &.normal {
    border-left: 3px solid map.get($colors, primary);
  }

  &.high {
    border-left: 3px solid map.get($colors, warning);
  }

  &.urgent {
    border-left: 3px solid map.get($colors, danger);
  }
}

.activityContent {
  @include flex(column, flex-start, stretch, map.get($spacing, xs));
}

.activityTitle {
  font-size: 0.875rem;
  font-weight: 500;
  color: map.get($colors, gray-900);
}

.activityMeta {
  font-size: 0.75rem;
  color: map.get($colors, gray-500);
}

.tag {
  padding: map.get($spacing, xs) map.get($spacing, sm);
  border-radius: map.get($radius, sm);
  font-size: 0.75rem;
  font-weight: 500;
  
  &.urgent {
    background-color: map.get($colors, danger-light);
    color: map.get($colors, danger);
  }
  
  &.high {
    background-color: map.get($colors, warning-light);
    color: map.get($colors, warning);
  }
  
  &.normal {
    background-color: map.get($colors, primary-light);
    color: map.get($colors, primary);
  }
}

// Graph Container Styles
.graphContainer {
  background-color: var(--chart-bg, var(--card));
  border-radius: map.get($radius, lg);
  padding: map.get($spacing, lg);
  box-shadow:
  0 0 0 1px var(--btn-hover-outline), /* subtle outline ring */
  0 6px 16px var(--elev); 
  margin-bottom: map.get($spacing, xl);
  

  .graphGrid {
    display: grid;
    grid-template-columns: 2fr 1fr;
    gap: map.get($spacing, lg);
  }

  .mainGraph, .sideGraph {
    .graphTitle {
      font-size: 1.25rem;
      font-weight: 600;
      color: var(--text);
      margin-bottom: map.get($spacing, lg);
    }

    .graph {
      height: 300px;
      position: relative;
    
    }
  }

  .sideGraph {
    .graph {
      height: 300px;
      display: flex;
      align-items: center;
      justify-content: center;
      
    }
  }
  :global(svg text) { fill: var(--text); }
}

.distributionSection{
  span{color:var(--text);}
  
}



// Responsive Styles
@media (max-width: 1024px) {
  .employeeList {
    grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));
  }

  .statsGrid {
    grid-template-columns: repeat(2, 1fr);
  }

  .graphContainer {
    .graphGrid {
      grid-template-columns: 1fr;
    }

    .sideGraph {
      .graph {
        height: 250px;
        
      }
    }
  }
}

@media (max-width: 768px) {
  .container {
    padding: map.get($spacing, base);
  }

  .header {
    flex-direction: column;
    align-items: flex-start;
    gap: map.get($spacing, base);
  }

  .headerButtons {
    width: 100%;
    flex-direction: column;
  }

  .overviewGrid {
    grid-template-columns: 1fr;
    
  }

  .distributionSection,
  .activitySection {
    grid-template-columns: 1fr;
    
  }

  .distributionItem {
    grid-template-columns: 1.5fr 2fr 0.5fr;
   
  }

  .employeeList {
    grid-template-columns: 1fr;
  }

  .statsGrid {
    grid-template-columns: repeat(2, 1fr);
  }

  .graphContainer {
    padding: map.get($spacing, base);
    
    .mainGraph, .sideGraph {
      .graph {
        height: 250px;
      }
    }
  }
}